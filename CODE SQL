-- Limpar e criar banco de dados
DROP DATABASE IF EXISTS ecommerce;
CREATE DATABASE ecommerce;
USE ecommerce;

-- Tabelas
CREATE TABLE clients (
    idClient INT AUTO_INCREMENT PRIMARY KEY,
    Fname VARCHAR(15) NOT NULL,
    Minit CHAR(3),
    Lname VARCHAR(15) NOT NULL,
    CPF CHAR(11) NOT NULL UNIQUE,
    Address VARCHAR(100) NOT NULL
);

CREATE TABLE products (
    idProduct INT AUTO_INCREMENT PRIMARY KEY,
    pname VARCHAR(100) NOT NULL,
    classification_kids BOOLEAN DEFAULT FALSE,
    category ENUM('eletronico','vestimenta','brinquedos','alimentos','moveis') NOT NULL,
    rating FLOAT DEFAULT 0,
    size VARCHAR(10)
);

CREATE TABLE orders (
    idOrder INT AUTO_INCREMENT PRIMARY KEY,
    idClient INT NOT NULL,
    orderStatus ENUM('confirmado','cancelado','em processamento') DEFAULT 'em processamento',
    orderDescription VARCHAR(255),
    shippingValue FLOAT DEFAULT 10,
    paymentCash BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (idClient) REFERENCES clients(idClient)
);

CREATE TABLE payments (
    idPayment INT AUTO_INCREMENT PRIMARY KEY,
    idClient INT NOT NULL,
    typePayment ENUM('cash','debit','credit','pix') NOT NULL,
    limitAvailable FLOAT,
    FOREIGN KEY (idClient) REFERENCES clients(idClient)
);

CREATE TABLE productStorage (
    idProdStorage INT AUTO_INCREMENT PRIMARY KEY,
    storageLocation VARCHAR(255) NOT NULL,
    quantity INT DEFAULT 0
);

CREATE TABLE suppliers (
    idSupplier INT AUTO_INCREMENT PRIMARY KEY,
    socialName VARCHAR(255) NOT NULL,
    CNPJ CHAR(14) NOT NULL UNIQUE,
    contact CHAR(11) NOT NULL
);

CREATE TABLE sellers (
    idSeller INT AUTO_INCREMENT PRIMARY KEY,
    socialName VARCHAR(255) NOT NULL,
    abstName VARCHAR(255),
    CNPJ CHAR(14) UNIQUE,
    CPF CHAR(11) UNIQUE,
    location VARCHAR(255),
    contact CHAR(11) NOT NULL
);

CREATE TABLE productSeller (
    idSeller INT NOT NULL,
    idProduct INT NOT NULL,
    prodQuantity INT DEFAULT 1,
    PRIMARY KEY (idSeller, idProduct),
    FOREIGN KEY (idSeller) REFERENCES sellers(idSeller),
    FOREIGN KEY (idProduct) REFERENCES products(idProduct)
);

CREATE TABLE productOrder (
    idProduct INT NOT NULL,
    idOrder INT NOT NULL,
    poQuantity INT DEFAULT 1,
    poStatus ENUM('disponivel', 'sem estoque') DEFAULT 'disponivel',
    PRIMARY KEY (idProduct, idOrder),
    FOREIGN KEY (idProduct) REFERENCES products(idProduct),
    FOREIGN KEY (idOrder) REFERENCES orders(idOrder)
);

CREATE TABLE productStorageLocation (
    idProduct INT NOT NULL,
    idStorage INT NOT NULL,
    location VARCHAR(255) NOT NULL,
    PRIMARY KEY (idProduct, idStorage),
    FOREIGN KEY (idProduct) REFERENCES products(idProduct),
    FOREIGN KEY (idStorage) REFERENCES productStorage(idProdStorage)
);

CREATE TABLE productSupplier (
    idSupplier INT NOT NULL,
    idProduct INT NOT NULL,
    quantity INT NOT NULL,
    PRIMARY KEY (idSupplier, idProduct),
    FOREIGN KEY (idSupplier) REFERENCES suppliers(idSupplier),
    FOREIGN KEY (idProduct) REFERENCES products(idProduct)
);

-- Parte 1: Views (visões personalizadas)

-- View: Clientes e pedidos com status
CREATE OR REPLACE VIEW view_clients_by_orders AS
SELECT 
    c.idClient,
    CONCAT(c.Fname, ' ', IFNULL(c.Minit, ''), ' ', c.Lname) AS fullName,
    o.idOrder,
    o.orderStatus
FROM clients c
JOIN orders o ON c.idClient = o.idClient;

-- View: Produtos com pedidos e frete total
CREATE OR REPLACE VIEW view_full_orders AS
SELECT 
    p.pname,
    p.rating,
    (p.rating + 1) AS adjustedRating,
    (o.shippingValue + 10) AS totalShipping
FROM products p
JOIN productOrder po ON p.idProduct = po.idProduct
JOIN orders o ON po.idOrder = o.idOrder;

-- Parte 2: Triggers

-- Trigger BEFORE DELETE em clients (log fictício)
DELIMITER //
CREATE TRIGGER trg_before_delete_client
BEFORE DELETE ON clients
FOR EACH ROW
BEGIN
    SIGNAL SQLSTATE '45000'
    SET MESSAGE_TEXT = 'Operação de DELETE em clients bloqueada por segurança.';
END;
//
DELIMITER ;

-- Trigger BEFORE UPDATE em payments (verificação de limite)
DELIMITER //
CREATE TRIGGER trg_before_update_payment
BEFORE UPDATE ON payments
FOR EACH ROW
BEGIN
    IF NEW.limitAvailable < 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Limite disponível não pode ser negativo.';
    END IF;
END;
//
DELIMITER ;

-- Parte 3: Criação de usuários e permissões

-- Garantir que usuários não existam
DROP USER IF EXISTS 'gerente'@'localhost';
DROP USER IF EXISTS 'funcionario'@'localhost';

-- Criar usuários
CREATE USER 'gerente'@'localhost' IDENTIFIED BY 'senha123';
CREATE USER 'funcionario'@'localhost' IDENTIFIED BY 'senha456';

-- Permissões para gerente (mais abrangente)
GRANT SELECT ON ecommerce.view_full_orders TO 'gerente'@'localhost';
GRANT SELECT ON ecommerce.view_clients_by_orders TO 'gerente'@'localhost';

-- Permissões para funcionário (restrito)
GRANT SELECT ON ecommerce.view_clients_by_orders TO 'funcionario'@'localhost';

-- Aplicar permissões
FLUSH PRIVILEGES;
